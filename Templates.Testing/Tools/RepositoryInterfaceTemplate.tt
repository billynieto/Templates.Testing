<#@ template language="C#" hostspecific="True" debug="True" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ Assembly name="$(SolutionDir)packages\Templates.2.1.6423.24029\lib\net45\Templates.dll" #>
<#@ Assembly name="$(SolutionDir)packages\Templates.2.1.6423.24029\lib\net45\Templates.Framework.dll" #>
<#@ Assembly name="$(SolutionDir)packages\Templates.Testing.X.X.XXXX.XXXXX\lib\net45\Templates.Testing.dll" #>
<#@ Assembly name="$(SolutionDir)packages\Templates.Testing.X.X.XXXX.XXXXX\lib\net45\Templates.Testing.Framework.dll" #>
<#@ import namespace="Templates" #>
<#@ import namespace="Templates.Framework" #>
<#@ import namespace="Templates.Testing" #>
<#@ import namespace="Templates.Testing.Framework" #>
<#@ include file="Common.tt" #>
<#
//Debugger.Launch();

DirectoryInfo currentDirectory = new FileInfo(Host.TemplateFile).Directory;
DirectoryInfo projectDirectory = currentDirectory.Parent;
DirectoryInfo solutionDirectory = projectDirectory.Parent;

ISpecification specification = Specification.Load(solutionDirectory);

StringBuilder repositoriesDirectoryPath = new StringBuilder()
	.Append(solutionDirectory.FullName)
	.Append(@"\")
	.Append(specification.Settings.FrameworkNamespace.Name)
	.Append(@"\Repositories");
DirectoryInfo repositoriesDirectory = new DirectoryInfo(repositoriesDirectoryPath.ToString());
if(!repositoriesDirectory.Exists)
	repositoriesDirectory.Create();
	
foreach(ISpecificationModel model in specification.Models.Values)
{
	if(!model.HasRepositoryAndService)
		continue;
		
	filesToGenerate.Add(GenerateRepositoryInterfaceDesignerFile(specification, model));
	if(new FileInfo(repositoriesDirectory.FullName + @"\" + model.RepositoryInterface.VariableType.Name + ".cs").Exists == false)
		filesToGenerate.Add(GenerateRepositoryInterfaceFile(specification, model));
}

GenerateFiles(repositoriesDirectory.FullName, filesToGenerate);
#>
<#+
IFile GenerateRepositoryInterfaceFile(ISpecification specification, ISpecificationModel model)
{
	IFile file = new TemplateFile(specification.Settings.FrameworkRepositoriesNamespace, model.RepositoryInterface.VariableType.Name, "cs");
	
	file.Components.Enqueue(GenerateRepositoryInterface(specification, file.Namespace, model));

	return file;
}

IFile GenerateRepositoryInterfaceDesignerFile(ISpecification specification, ISpecificationModel model)
{
	IFile file = new TemplateFile(specification.Settings.FrameworkRepositoriesNamespace, model.RepositoryInterface.VariableType.Name + ".Designer", "cs");
	
	file.Uses(TemplateNamespace.System);
	file.Uses(TemplateNamespace.System_Collections_Generic);
	file.NewUsingStatementBlock();
	file.Uses(TestingHelper.RepositoryFrameworkNamespace);
	file.NewUsingStatementBlock();
	file.Uses(specification.Settings.FrameworkModelsNamespace);
	
	file.Components.Enqueue(GenerateRepositoryDesignerInterface(specification, file.Namespace, model));
		
	return file;
}
#>
<#+
IInterface GenerateRepositoryInterface(ISpecification specification, INamespace _namespace, ISpecificationModel model)
{
	IInterface _interface = new TemplateInterface(_namespace, model.RepositoryInterface.VariableType.Name);
	_interface.IsPartial = true;
	_interface.WillImplement(new TemplateGenericInterface(TestingHelper.RepositoryFrameworkNamespace, specification.RepositoryInterface.Name, new List<string>() { model.Interface.VariableType.Name, model.KeyInterface.VariableType.Name, model.SearchInterface.VariableType.Name, model.SearchMultipleInterface.VariableType.Name }));
	
	return _interface;
}

IInterface GenerateRepositoryDesignerInterface(ISpecification specification, INamespace _namespace, ISpecificationModel model)
{
	IInterface _interface = new TemplateInterface(_namespace, model.RepositoryInterface.VariableType.Name);
	_interface.IsPartial = true;
	_interface.WillImplement(new TemplateGenericInterface(TestingHelper.RepositoryFrameworkNamespace, specification.RepositoryInterface.Name, new List<string>() { model.Interface.VariableType.Name, model.KeyInterface.VariableType.Name, model.SearchInterface.VariableType.Name, model.SearchMultipleInterface.VariableType.Name }));
	
	return _interface;
}
#>